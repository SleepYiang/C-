#include<vector>
#include<iostream>
//vector:
//(1) at与[]       at可以检测是否越界,两者可以同时满足都和写，但是[]是实在下标中加相关的数字会出现地址错误的问题
//(2)构造函数:      使用{}调用隐式构造函数，()调用显示构造函数  eg:{4}构造一个4 (4)构造4个0（长度为4）
//                构造函数的初始化为0，不需要使用memset初始化
//(3)operator[]:  采用索引的方式给访问会出现地址失效访问时需要注意下标的位置，at()是成员函数防止越界
//resize:         用来重置容量大小，保持原来的部分不变后面加0，或者直接析构多的部分  扩容会使data失   效
//claer           直接把原有的元素重构为0，容量不会发生改变
//push_back       在数组的末尾台添加元素
//pop_back        在数组的末尾减去一个元素，但是不会有返回值，只是大小减一
//back            直接获取末尾的元素
//front           直接获取首元素
//data()          获取首地址指针
//vector安全       RAII内存安全，会自动释放内存
//生命周期的延长     在一个语句块中使用弱引用，把语句块中的vector移动到外面的vector上指针失效 eg: a=move(b)
//reserve          预留一定的空间，也会是data失效，可以使用shrink_to_fit释放多余的容量
int main()
{
    return 0;
}